import React, { useState, useRef, useEffect } from "react";
import styled from "styled-components";

const AppContainer = styled.div`
  text-align: center;
  background: #0e1433;
  min-height: 100vh;
  color: white;
  padding: 20px;
`;

const Title = styled.h2`
  margin-bottom: 20px;
`;

const MainContainer = styled.div`
  display: flex;
  justify-content: center;
  gap: 50px;
  flex-wrap: wrap;
`;

const Left = styled.div`
  display: flex;
  flex-direction: column;
  gap: 20px;
`;

const Card = styled.div`
  background: #1a2146;
  padding: 20px;
  width: 380px;
  border-radius: 10px;
  text-align: left;
  border: ${(props) => (props.verified ? "2px solid #00ff84" : "none")};
`;

const RightContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 15px;
`;

const Right = styled.div`
  background: #1a2146;
  width: 380px;
  height: 320px;
  border-radius: 10px;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
  position: relative;
`;

const Media = styled.video`
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 10px;
`;

const Img = styled.img`
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 10px;
`;

const Button = styled.button`
  margin-top: 8px;
  padding: 8px 20px;
  background: #007bff;
  border: none;
  border-radius: 6px;
  color: white;
  font-size: 14px;
  cursor: pointer;
`;

const StartExamButton = styled(Button)`
  background: #00ff84;
  color: black;
  font-weight: bold;
  margin-top: 10px;
`;

const CameraQuestion = styled.div`
  position: absolute;
  bottom: 10px;
  background: rgba(0, 0, 0, 0.6);
  padding: 8px;
  width: 100%;
  text-align: center;
`;

function SystemCheck() {
  const [cameraVerified, setCameraVerified] = useState(false);
  const [micVerified, setMicVerified] = useState(false);
  const [internetVerified, setInternetVerified] = useState(false);

  const [videoActive, setVideoActive] = useState(false);
  const [videoStream, setVideoStream] = useState(null);
  const [showCameraConfirm, setShowCameraConfirm] = useState(false);

  const [audioURL, setAudioURL] = useState(null);
  const [showMicConfirm, setShowMicConfirm] = useState(false);
  const [countdown, setCountdown] = useState(0);
  const [isRecording, setIsRecording] = useState(false);

  const [speed, setSpeed] = useState(null);
  const [ping, setPing] = useState(null);
  const [testingInternet, setTestingInternet] = useState(false);

  const videoRef = useRef(null);

  useEffect(() => {
    if (videoRef.current && videoStream) {
      videoRef.current.srcObject = videoStream;
    }
  }, [videoStream]);

  // ‚úÖ Camera check
  const handleCameraCheck = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: true });
      setVideoStream(stream);
      setVideoActive(true);
      setShowCameraConfirm(true);
    } catch (err) {
      console.error("Camera error", err);
    }
  };

  const confirmCamera = (answer) => {
    if (answer) setCameraVerified(true);
    setShowCameraConfirm(false);
    if (videoStream) videoStream.getTracks().forEach((t) => t.stop());
    setVideoStream(null);
    setVideoActive(false);
  };

  // ‚úÖ Microphone check
  const handleMicCheck = async () => {
    if (isRecording) return;
    setIsRecording(true);
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      const chunks = [];

      mediaRecorder.ondataavailable = (e) => chunks.push(e.data);
      mediaRecorder.onstop = () => {
        const blob = new Blob(chunks, { type: "audio/wav" });
        setAudioURL(URL.createObjectURL(blob));
        setShowMicConfirm(true);
        setIsRecording(false);
        setCountdown(0);
        stream.getTracks().forEach((track) => track.stop());
      };

      setCountdown(5);
      let t = 5;
      const interval = setInterval(() => {
        t -= 1;
        setCountdown(t);
        if (t === 0) {
          clearInterval(interval);
          mediaRecorder.stop();
        }
      }, 1000);

      mediaRecorder.start();
    } catch (err) {
      console.error("Mic error", err);
      setIsRecording(false);
    }
  };

  const handleMicConfirm = (answer) => {
    if (answer) setMicVerified(true);
    setShowMicConfirm(false);
    setAudioURL(null);
  };

  // ‚úÖ Internet check
  const handleInternetCheck = () => {
    setTestingInternet(true);
    setSpeed(null);
    setPing(null);
    const image = new Image();
    const start = Date.now();
    const imageUrl =
      "https://upload.wikimedia.org/wikipedia/commons/3/3f/Fronalpstock_big.jpg";

    image.onload = function () {
      const duration = (Date.now() - start) / 1000;
      const bitsLoaded = 2 * 8 * 1024 * 1024; // ~2MB
      const speedMbps = (bitsLoaded / duration / 1024 / 1024).toFixed(2);
      const fakeUpload = (speedMbps * 0.7).toFixed(2);

      setSpeed({ download: speedMbps, upload: fakeUpload });
      setInternetVerified(parseFloat(speedMbps) > 10);
      setTestingInternet(false);
    };

    image.onerror = function () {
      setInternetVerified(false);
      setTestingInternet(false);
    };

    image.src = imageUrl + "?cache=" + Math.random();
  };

  return (
    <AppContainer>
      <Title>System Check - Checking Your Requirements</Title>

      <MainContainer>
        <Left>
          <Card verified={cameraVerified}>
            <h3>üì∑ Camera Check {cameraVerified && "‚úî"}</h3>
            <p>Test your camera</p>
            <Button onClick={handleCameraCheck}>Check Camera</Button>
          </Card>

          <Card verified={micVerified}>
            <h3>üé§ Microphone Check {micVerified && "‚úî"}</h3>
            <p>Test your Microphone</p>
            <Button onClick={handleMicCheck}>Record</Button>
            {countdown > 0 && (
              <p style={{ color: "yellow" }}>Recording {countdown}...</p>
            )}
            {audioURL && (
              <>
                <p style={{ color: "#00ff84" }}>Playback your recorded audio</p>
                <audio
                  controls
                  src={audioURL}
                  style={{
                    width: "70%",
                    height: "30px",
                    marginBottom: "8px",
                  }}
                ></audio>
              </>
            )}
            {showMicConfirm && (
              <div>
                <p>Did you hear the recorded audio?</p>
                <div
                  style={{
                    display: "flex",
                    gap: "15px",
                    marginTop: "6px",
                  }}
                >
                  <Button onClick={() => handleMicConfirm(true)}>Yes</Button>
                  <Button onClick={() => handleMicConfirm(false)}>No</Button>
                </div>
              </div>
            )}
          </Card>

          <Card verified={internetVerified}>
            <h3>üåê Internet Check {internetVerified && "‚úî"}</h3>
            <p>Test Internet Speed</p>
            <Button onClick={handleInternetCheck}>Test Connectivity</Button>
            {testingInternet && (
              <p style={{ color: "yellow" }}>Testing...</p>
            )}
            {speed && (
              <>
                <p style={{ color: "#00ff84" }}>
                  Download: {speed.download} Mbps
                </p>
                <p style={{ color: "#00ff84" }}>Upload: {speed.upload} Mbps</p>
              </>
            )}
            {!internetVerified && speed && (
              <p style={{ color: "red" }}>Network is poor</p>
            )}
          </Card>
        </Left>

        <RightContainer>
          <Right>
            {videoActive && videoStream ? (
              <>
                <Media ref={videoRef} autoPlay playsInline></Media>
                {showCameraConfirm && (
                  <CameraQuestion>
                    <p>Can you see yourself?</p>
                    <div
                      style={{
                        display: "flex",
                        justifyContent: "center",
                        gap: "15px",
                        marginTop: "6px",
                      }}
                    >
                      <Button onClick={() => confirmCamera(true)}>Yes</Button>
                      <Button onClick={() => confirmCamera(false)}>No</Button>
                    </div>
                  </CameraQuestion>
                )}
              </>
            ) : (
              <Img src="/girl.png" alt="placeholder" />
            )}
          </Right>
          <StartExamButton>Start Exam</StartExamButton>
        </RightContainer>
      </MainContainer>
    </AppContainer>
  );
}

export default SystemCheck;






DDL(DATA DEFINITION LANGUAGE)
1. CREATE
	CREATE TABLE TABLENAME (COLUMNAME DATATYPE (SIZE), .....) VALUES (12, 'HI', 07/02/2002);
2. ALTER
	ALTER TABLE TABLENAME ADD(COLUMNNAME DATATYPE (SIZE))
	ALTER TABLE TABLENAME ADD(COLUMNNAME DATATYPE (SIZE), (COLUMNNAME DATATYPE (SIZE) ..........)
	ALTER TABLE TABLENAME MODIFY(COLUMNNAME DATATYPE (SIZE))
3. DELETE A COLUMN
	ALTER TABLE TABLENAME DROP COLUMN COLUMNNAME;
	ALTER TABLE TABLENAME DROP COLUMN COLUMNNAME1, COLUMNANAME2.....;
4. TRUNCATE
	TRUNCATE TABLE TABLENAME
5. DROP
	DROP TABLE TABLENAME
6. RENAME
	RENAME TABLE OLDNAME TO NEWNAME  //FOR TABLE
	ALTER TABLE TABLENAME RENAME COLUMN OLDNAME TO NEWNAME



DML(DATA MANIPULATION LANGUAGE)

1. INSERT 
	INSERT INTO TABLE NAME (COLUMNAME, ...) VALUES (VALUE1...)
2. UPDATE
	UPDATE TABLE TABLENAME SET COLUMNNAME="VALUE" WHERE (CONDN)
3. DELETE
	DELETE FROM TABLENAME
	DELETE FROM TABLENAME WHERE CONDN


1. INNER JOIN
üëâ Returns only the rows where there is a match in both tables.
sql
SELECT Employees.emp_id, Employees.emp_name, Departments.dept_name
FROM Employees
INNER JOIN Departments
ON Employees.dept_id = Departments.dept_id;

2. LEFT JOIN (LEFT OUTER JOIN)
üëâ Returns all rows from the LEFT table, even if there is no match in the RIGHT table. Missing matches
will show NULL.
sql
SELECT Employees.emp_id, Employees.emp_name, Departments.dept_name
FROM Employees
LEFT JOIN Departments
ON Employees.dept_id = Departments.dept_id;

3.  RIGHT JOIN (RIGHT OUTER JOIN)
üëâ Opposite of LEFT JOIN. Returns all rows from the RIGHT table, even if there‚Äôs no match in the LEFT.
sql
SELECT Employees.emp_id, Employees.emp_name, Departments.dept_name
FROM Employees
RIGHT JOIN Departments
ON Employees.dept_id = Departments.dept_id;

4. FULL JOIN (FULL OUTER JOIN)
üëâ Returns all rows from both tables. If no match, returns NULL.
sql
SELECT Employees.emp_id, Employees.emp_name, Departments.dept_name
FROM Employees
FULL OUTER JOIN Departments
ON Employees.dept_id = Departments.dept_id;

5. CROSS JOIN
üëâ Returns all possible combinations (Cartesian product).
sql
SELECT Employees.emp_id, Employees.emp_name, Departments.dept_name
FROM Employees
CROSS JOIN Departments;




1 -- INNER JOIN
SELECT columns
FROM table1
INNER JOIN table2
ON table1.column = table2.column;

2 -- LEFT JOIN / LEFT OUTER JOIN
SELECT columns
FROM table1
LEFT JOIN table2
ON table1.column = table2.column;

3 -- RIGHT JOIN / RIGHT OUTER JOIN
SELECT columns
FROM table1
RIGHT JOIN table2
ON table1.column = table2.column;

4 -- FULL OUTER JOIN
SELECT columns
FROM table1
FULL OUTER JOIN table2
ON table1.column = table2.column;

5 -- CROSS JOIN
SELECT columns
FROM table1
CROSS JOIN table2;
